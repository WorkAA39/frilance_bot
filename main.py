import asyncio
import logging
import sqlite3
import aiohttp
import json
import os

from dotenv import load_dotenv, find_dotenv

from datetime import datetime, timedelta
from typing import Dict, List, Optional

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN')
ALPHA_VANTAGE_API_KEY = os.getenv('ALPHA_VANTAGE_API_KEY')


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class UserStates(StatesGroup):
    waiting_for_ticker = State()
    setting_alert = State()
    calculator_input = State()

class FinancialBot:
    def __init__(self):
        self.bot = Bot(token=BOT_TOKEN)
        self.dp = Dispatcher(storage=MemoryStorage())
        self.init_database()
        self.register_handlers()
        
    def init_database(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        conn = sqlite3.connect('financial_bot.db')
        cursor = conn.cursor()
        
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        

        cursor.execute('''
            CREATE TABLE IF NOT EXISTS watchlist (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                ticker TEXT,
                added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        

        cursor.execute('''
            CREATE TABLE IF NOT EXISTS alerts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                ticker TEXT,
                target_price REAL,
                alert_type TEXT,
                is_active BOOLEAN DEFAULT 1,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        
        conn.commit()
        conn.close()

    async def get_stock_data(self, ticker: str) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –∞–∫—Ü—ñ—é —á–µ—Ä–µ–∑ Alpha Vantage API"""
        url = f"https://www.alphavantage.co/query"
        params = {
            'function': 'GLOBAL_QUOTE',
            'symbol': ticker,
            'apikey': ALPHA_VANTAGE_API_KEY
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, params=params) as response:
                    data = await response.json()
                    
                    if 'Global Quote' in data:
                        quote = data['Global Quote']
                        return {
                            'symbol': quote.get('01. symbol', ''),
                            'price': float(quote.get('05. price', 0)),
                            'change': float(quote.get('09. change', 0)),
                            'change_percent': quote.get('10. change percent', '0%'),
                            'volume': int(quote.get('06. volume', 0)),
                            'high': float(quote.get('03. high', 0)),
                            'low': float(quote.get('04. low', 0)),
                            'open': float(quote.get('02. open', 0)),
                            'previous_close': float(quote.get('08. previous close', 0))
                        }
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è {ticker}: {e}")
            return None

    async def get_company_overview(self, ticker: str) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ–º–ø–∞–Ω—ñ—é"""
        url = f"https://www.alphavantage.co/query"
        params = {
            'function': 'OVERVIEW',
            'symbol': ticker,
            'apikey': ALPHA_VANTAGE_API_KEY
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, params=params) as response:
                    data = await response.json()
                    if 'Symbol' in data:
                        return data
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–≥–ª—è–¥—É –¥–ª—è {ticker}: {e}")
            return None

    def save_user(self, user_id: int, username: str, first_name: str):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ë–î"""
        conn = sqlite3.connect('financial_bot.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO users (user_id, username, first_name)
            VALUES (?, ?, ?)
        ''', (user_id, username, first_name))
        conn.commit()
        conn.close()

    def add_to_watchlist(self, user_id: int, ticker: str):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–∫—Ü—ñ—ó –¥–æ —Å–ø–∏—Å–∫—É –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è"""
        conn = sqlite3.connect('financial_bot.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO watchlist (user_id, ticker)
            VALUES (?, ?)
        ''', (user_id, ticker.upper()))
        conn.commit()
        conn.close()

    def get_watchlist(self, user_id: int) -> List[str]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        conn = sqlite3.connect('financial_bot.db')
        cursor = conn.cursor()
        cursor.execute('SELECT ticker FROM watchlist WHERE user_id = ?', (user_id,))
        result = [row[0] for row in cursor.fetchall()]
        conn.close()
        return result

    def register_handlers(self):
        """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        
        @self.dp.message(Command("start"))
        async def start_handler(message: types.Message):
            user = message.from_user
            self.save_user(user.id, user.username or "", user.first_name or "")
            
            welcome_text = """
                ``üè¶ <b>–í—ñ—Ç–∞—é —É –§—ñ–Ω–∞–Ω—Å–æ–≤–æ–º—É –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—ñ!</b>

                –Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –∑ –∞–Ω–∞–ª—ñ–∑–æ–º —Ñ–æ–Ω–¥–æ–≤–æ–≥–æ —Ä–∏–Ω–∫—É:

                üìä <b>–ú–æ—ó –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:</b>
                ‚Ä¢ –ê–Ω–∞–ª—ñ–∑ –∞–∫—Ü—ñ–π –∑–∞ —Ç—ñ–∫–µ—Ä–æ–º
                ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–º–ø–∞–Ω—ñ—ó
                ‚Ä¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π
                ‚Ä¢ –°–ø–∏—Å–æ–∫ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∞–∫—Ü—ñ–π
                ‚Ä¢ –†–∏–Ω–∫–æ–≤—ñ –Ω–æ–≤–∏–Ω–∏ —Ç–∞ –ø–æ—Ä–∞–¥–∏

                <b>–ö–æ–º–∞–Ω–¥–∏:</b>
                /stock [TICKER] - –∞–Ω–∞–ª—ñ–∑ –∞–∫—Ü—ñ—ó
                /overview [TICKER] - –æ–≥–ª—è–¥ –∫–æ–º–ø–∞–Ω—ñ—ó
                /watchlist - –≤–∞—à —Å–ø–∏—Å–æ–∫ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è
                /calculator - –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π
                /tips - —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω—ñ –ø–æ—Ä–∞–¥–∏
                /help - –¥–æ–ø–æ–º–æ–≥–∞

                –í–≤–µ–¥—ñ—Ç—å —Ç—ñ–∫–µ—Ä –∞–∫—Ü—ñ—ó –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –º–µ–Ω—é üëá``
            """
            
           
            kb = ReplyKeyboardBuilder()
            kb.add(KeyboardButton(text="üìä –ê–Ω–∞–ª—ñ–∑ –∞–∫—Ü—ñ—ó"))
            kb.add(KeyboardButton(text="üè¢ –û–≥–ª—è–¥ –∫–æ–º–ø–∞–Ω—ñ—ó"))
            kb.add(KeyboardButton(text="üìã –ú—ñ–π —Å–ø–∏—Å–æ–∫"))
            kb.add(KeyboardButton(text="üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"))
            kb.add(KeyboardButton(text="üí° –ü–æ—Ä–∞–¥–∏"))
            kb.add(KeyboardButton(text="üìà –¢–æ–ø –∞–∫—Ü—ñ—ó"))
            kb.adjust(2)
            
            await message.answer(welcome_text, parse_mode="HTML", 
                               reply_markup=kb.as_markup(resize_keyboard=True))

        @self.dp.message(Command("stock"))
        async def stock_command(message: types.Message):
            args = message.text.split()
            if len(args) < 2:
                await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ç—ñ–∫–µ—Ä –∞–∫—Ü—ñ—ó. –ü—Ä–∏–∫–ª–∞–¥: /stock AAPL")
                return
                
            ticker = args[1].upper()
            await self.send_stock_analysis(message, ticker)

        @self.dp.message(Command("overview"))
        async def overview_command(message: types.Message):
            args = message.text.split()
            if len(args) < 2:
                await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ç—ñ–∫–µ—Ä –∫–æ–º–ø–∞–Ω—ñ—ó. –ü—Ä–∏–∫–ª–∞–¥: /overview AAPL")
                return
                
            ticker = args[1].upper()
            await self.send_company_overview(message, ticker)

        @self.dp.message(Command("watchlist"))
        async def watchlist_command(message: types.Message):
            watchlist = self.get_watchlist(message.from_user.id)
            
            if not watchlist:
                await message.answer("üìã –í–∞—à —Å–ø–∏—Å–æ–∫ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—ñ–π.\n"
                                   "–î–æ–¥–∞–π—Ç–µ –∞–∫—Ü—ñ—ó –∫–æ–º–∞–Ω–¥–æ—é /stock [TICKER] —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–æ–¥–∞—Ç–∏ –¥–æ —Å–ø–∏—Å–∫—É'")
                return
            
            text = "üìã <b>–í–∞—à —Å–ø–∏—Å–æ–∫ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è:</b>\n\n"
            for ticker in watchlist:
                stock_data = await self.get_stock_data(ticker)
                if stock_data:
                    change_emoji = "üìà" if stock_data['change'] > 0 else "üìâ"
                    text += f"{change_emoji} <b>{ticker}</b>: ${stock_data['price']:.2f} "
                    text += f"({stock_data['change_percent']})\n"
                else:
                    text += f"‚Ä¢ <b>{ticker}</b>: –î–∞–Ω—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ\n"
            
            await message.answer(text, parse_mode="HTML")

        @self.dp.message(Command("calculator"))
        async def calculator_command(message: types.Message, state: FSMContext):
            await message.answer(
                "üßÆ <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π</b>\n\n"
                "–í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
                "<code>TICKER –∫—ñ–ª—å–∫—ñ—Å—Ç—å_–∞–∫—Ü—ñ–π —Ü—ñ–Ω–∞_–ø–æ–∫—É–ø–∫–∏</code>\n\n"
                "–ü—Ä–∏–∫–ª–∞–¥: <code>AAPL 10 150.50</code>",
                parse_mode="HTML"
            )
            await state.set_state(UserStates.calculator_input)

        @self.dp.message(Command("tips"))
        async def tips_command(message: types.Message):
            tips = [
                "üí° <b>–î–∏–≤–µ—Ä—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è</b> - –Ω–µ –≤–∫–ª–∞–¥–∞–π—Ç–µ –≤—Å—ñ –≥—Ä–æ—à—ñ –≤ –æ–¥–Ω—É –∞–∫—Ü—ñ—é",
                "üìä <b>–ê–Ω–∞–ª—ñ–∑—É–π—Ç–µ P/E ratio</b> - –ø–æ–∫–∞–∑–Ω–∏–∫ –ø–µ—Ä–µ–æ—Ü—ñ–Ω–µ–Ω–æ—Å—Ç—ñ –∫–æ–º–ø–∞–Ω—ñ—ó",
                "üéØ <b>–î–æ–≤–≥–æ—Å—Ç—Ä–æ–∫–æ–≤—ñ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó</b> –∑–∞–∑–≤–∏—á–∞–π –º–µ–Ω—à —Ä–∏–∑–∏–∫–æ–≤–∞–Ω—ñ",
                "üìà <b>Dollar Cost Averaging</b> - –∫—É–ø—É–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –º–∞–ª–∏–º–∏ —Å—É–º–∞–º–∏",
                "üîç <b>–í–∏–≤—á–∞–π—Ç–µ –∫–æ–º–ø–∞–Ω—ñ—é</b> –ø–µ—Ä–µ–¥ —ñ–Ω–≤–µ—Å—Ç—É–≤–∞–Ω–Ω—è–º",
                "‚öñÔ∏è <b>–†–∏–∑–∏–∫ —Ç–∞ –ø—Ä–∏–±—É—Ç–æ–∫</b> –∑–∞–≤–∂–¥–∏ –ø–æ–≤'—è–∑–∞–Ω—ñ",
                "üì∞ <b>–°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –Ω–æ–≤–∏–Ωami</b> –∫–æ–º–ø–∞–Ω—ñ—ó —Ç–∞ —Ä–∏–Ω–∫—É"
            ]
            
            tip_text = "üí° <b>–Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω—ñ –ø–æ—Ä–∞–¥–∏:</b>\n\n" + "\n\n".join(tips)
            await message.answer(tip_text, parse_mode="HTML")

        @self.dp.message(F.text == "üìä –ê–Ω–∞–ª—ñ–∑ –∞–∫—Ü—ñ—ó")
        async def analyze_stock_button(message: types.Message, state: FSMContext):
            await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ç—ñ–∫–µ—Ä –∞–∫—Ü—ñ—ó –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: AAPL, TSLA, MSFT):")
            await state.set_state(UserStates.waiting_for_ticker)

        @self.dp.message(F.text == "üè¢ –û–≥–ª—è–¥ –∫–æ–º–ø–∞–Ω—ñ—ó")
        async def company_overview_button(message: types.Message, state: FSMContext):
            await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ç—ñ–∫–µ—Ä –∫–æ–º–ø–∞–Ω—ñ—ó –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ–≥–ª—è–¥—É:")
            await state.set_state(UserStates.waiting_for_ticker)

        @self.dp.message(F.text == "üìã –ú—ñ–π —Å–ø–∏—Å–æ–∫")
        async def my_watchlist_button(message: types.Message):
            await watchlist_command(message)

        @self.dp.message(F.text == "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
        async def calculator_button(message: types.Message, state: FSMContext):
            await calculator_command(message, state)

        @self.dp.message(F.text == "üí° –ü–æ—Ä–∞–¥–∏")
        async def tips_button(message: types.Message):
            await tips_command(message)

        @self.dp.message(F.text == "üìà –¢–æ–ø –∞–∫—Ü—ñ—ó")
        async def top_stocks_button(message: types.Message):
            top_stocks = ["AAPL", "MSFT", "GOOGL", "AMZN", "TSLA", "META", "NVDA", "JPM"]
            
            kb = InlineKeyboardBuilder()
            for stock in top_stocks:
                kb.add(InlineKeyboardButton(text=stock, callback_data=f"analyze_{stock}"))
            kb.adjust(2)
            
            await message.answer(
                "üìà <b>–ü–æ–ø—É–ª—è—Ä–Ω—ñ –∞–∫—Ü—ñ—ó:</b>\n\n–û–±–µ—Ä—ñ—Ç—å –∞–∫—Ü—ñ—é –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É:",
                parse_mode="HTML",
                reply_markup=kb.as_markup()
            )

        @self.dp.callback_query(F.data.startswith("analyze_"))
        async def analyze_callback(callback: types.CallbackQuery):
            ticker = callback.data.split("_")[1]
            await self.send_stock_analysis(callback.message, ticker)
            await callback.answer()

        @self.dp.callback_query(F.data.startswith("add_watchlist_"))
        async def add_watchlist_callback(callback: types.CallbackQuery):
            ticker = callback.data.split("_")[2]
            self.add_to_watchlist(callback.from_user.id, ticker)
            await callback.answer(f"‚úÖ {ticker} –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è!")

        @self.dp.callback_query(F.data.startswith("overview_"))
        async def overview_callback(callback: types.CallbackQuery):
            ticker = callback.data.split("_")[1]
            await self.send_company_overview(callback.message, ticker)
            await callback.answer()

        @self.dp.message(StateFilter(UserStates.waiting_for_ticker))
        async def process_ticker(message: types.Message, state: FSMContext):
            ticker = message.text.upper().strip()
            await self.send_stock_analysis(message, ticker)
            await state.clear()

        @self.dp.message(StateFilter(UserStates.calculator_input))
        async def process_calculator(message: types.Message, state: FSMContext):
            try:
                parts = message.text.strip().split()
                if len(parts) != 3:
                    raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç")
                
                ticker, shares_str, buy_price_str = parts
                shares = int(shares_str)
                buy_price = float(buy_price_str)
                
                # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É
                stock_data = await self.get_stock_data(ticker.upper())
                if not stock_data:
                    await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è —Ü—ñ—î—ó –∞–∫—Ü—ñ—ó")
                    return
                
                current_price = stock_data['price']
                total_invested = shares * buy_price
                current_value = shares * current_price
                profit_loss = current_value - total_invested
                profit_percent = (profit_loss / total_invested) * 100
                
                profit_emoji = "üìà" if profit_loss > 0 else "üìâ"
                
                result_text = f"""
üßÆ <b>–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π</b>

üìä <b>–ê–∫—Ü—ñ—è:</b> {ticker.upper()}
üí∞ <b>–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞:</b> ${current_price:.2f}
üî¢ <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ü—ñ–π:</b> {shares}
üíµ <b>–¶—ñ–Ω–∞ –ø–æ–∫—É–ø–∫–∏:</b> ${buy_price:.2f}

üí∏ <b>–Ü–Ω–≤–µ—Å—Ç–æ–≤–∞–Ω–æ:</b> ${total_invested:.2f}
üí∞ <b>–ü–æ—Ç–æ—á–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å:</b> ${current_value:.2f}

{profit_emoji} <b>–ü—Ä–∏–±—É—Ç–æ–∫/–ó–±–∏—Ç–æ–∫:</b> ${profit_loss:.2f} ({profit_percent:+.2f}%)
                """
                
                await message.answer(result_text, parse_mode="HTML")
                
            except Exception as e:
                await message.answer(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ –¥–∞–Ω–∏—Ö!\n\n"
                    "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>TICKER –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ü—ñ–Ω–∞</code>\n"
                    "–ü—Ä–∏–∫–ª–∞–¥: <code>AAPL 10 150.50</code>",
                    parse_mode="HTML"
                )
            
            await state.clear()

    async def send_stock_analysis(self, message: types.Message, ticker: str):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –∞–∫—Ü—ñ—ó"""
        await message.answer("üîç –®—É–∫–∞—é –¥–∞–Ω—ñ...")
        
        stock_data = await self.get_stock_data(ticker)
        if not stock_data:
            await message.answer(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è {ticker}")
            return
        
        change_emoji = "üìà" if stock_data['change'] > 0 else "üìâ"
        change_color = "üü¢" if stock_data['change'] > 0 else "üî¥"
        
        analysis_text = f"""
üìä <b>–ê–Ω–∞–ª—ñ–∑ –∞–∫—Ü—ñ—ó {stock_data['symbol']}</b>

üí∞ <b>–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞:</b> ${stock_data['price']:.2f}
{change_emoji} <b>–ó–º—ñ–Ω–∞:</b> {change_color} ${stock_data['change']:+.2f} ({stock_data['change_percent']})

üìà <b>–ú–∞–∫—Å–∏–º—É–º –¥–Ω—è:</b> ${stock_data['high']:.2f}
üìâ <b>–ú—ñ–Ω—ñ–º—É–º –¥–Ω—è:</b> ${stock_data['low']:.2f}
üéØ <b>–¶—ñ–Ω–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è:</b> ${stock_data['open']:.2f}
üîí <b>–ü–æ–ø–µ—Ä–µ–¥–Ω—î –∑–∞–∫—Ä–∏—Ç—Ç—è:</b> ${stock_data['previous_close']:.2f}
üìä <b>–û–±'—î–º —Ç–æ—Ä–≥—ñ–≤:</b> {stock_data['volume']:,}

‚è∞ <b>–û–Ω–æ–≤–ª–µ–Ω–æ:</b> {datetime.now().strftime('%Y-%m-%d %H:%M')}
        """
        

        kb = InlineKeyboardBuilder()
        kb.add(InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –¥–æ —Å–ø–∏—Å–∫—É", 
                                  callback_data=f"add_watchlist_{ticker}"))
        kb.add(InlineKeyboardButton(text="üè¢ –û–≥–ª—è–¥ –∫–æ–º–ø–∞–Ω—ñ—ó", 
                                  callback_data=f"overview_{ticker}"))
        kb.adjust(1)
        
        await message.answer(analysis_text, parse_mode="HTML", 
                           reply_markup=kb.as_markup())

    async def send_company_overview(self, message: types.Message, ticker: str):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –æ–≥–ª—è–¥—É –∫–æ–º–ø–∞–Ω—ñ—ó"""
        await message.answer("üîç –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –¥–∞–Ω—ñ –ø—Ä–æ –∫–æ–º–ø–∞–Ω—ñ—é...")
        
        overview_data = await self.get_company_overview(ticker)
        if not overview_data:
            await message.answer(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –∫–æ–º–ø–∞–Ω—ñ—é {ticker}")
            return
        
        overview_text = f"""
üè¢ <b>–û–≥–ª—è–¥ –∫–æ–º–ø–∞–Ω—ñ—ó {overview_data.get('Symbol', ticker)}</b>

üìù <b>–ù–∞–∑–≤–∞:</b> {overview_data.get('Name', 'N/A')}
üè≠ <b>–°–µ–∫—Ç–æ—Ä:</b> {overview_data.get('Sector', 'N/A')}
üîß <b>–Ü–Ω–¥—É—Å—Ç—Ä—ñ—è:</b> {overview_data.get('Industry', 'N/A')}
üåç <b>–ö—Ä–∞—ó–Ω–∞:</b> {overview_data.get('Country', 'N/A')}

üíπ <b>–†–∏–Ω–∫–æ–≤–∞ –∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è:</b> ${overview_data.get('MarketCapitalization', 'N/A')}
üí∞ <b>P/E –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç:</b> {overview_data.get('PERatio', 'N/A')}
üìä <b>EPS:</b> {overview_data.get('EPS', 'N/A')}
üíµ <b>–î–∏–≤—ñ–¥–µ–Ω–¥–∏:</b> {overview_data.get('DividendYield', 'N/A')}

üìà <b>52-—Ç–∏–∂–Ω–µ–≤–∏–π –º–∞–∫—Å–∏–º—É–º:</b> ${overview_data.get('52WeekHigh', 'N/A')}
üìâ <b>52-—Ç–∏–∂–Ω–µ–≤–∏–π –º—ñ–Ω—ñ–º—É–º:</b> ${overview_data.get('52WeekLow', 'N/A')}

üìÑ <b>–û–ø–∏—Å:</b> {overview_data.get('Description', '–û–ø–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π')[:500]}...
        """
        
        await message.answer(overview_text, parse_mode="HTML")

    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
        await self.dp.start_polling(self.bot)


async def main():
    bot = FinancialBot()
    await bot.start_bot()

if __name__ == "__main__":
    asyncio.run(main()) 